from tkinter import *
from PIL import Image, ImageTk
import cv2
import mediapipe as mp
import numpy as np
import imutils
import mysql.connector
import io

# Inicialización de Mediapipe para la detección de rostros
mp_face_detection = mp.solutions.face_detection
LABELS = ["Con_mascarilla", "Sin_mascarilla"]  # Etiquetas para los resultados del modelo

# Carga del modelo de reconocimiento facial
face_mask = cv2.face.LBPHFaceRecognizer_create()  # Modelo LBPH para reconocimiento facial
face_mask.read("face_mask_model.xml")  # Carga el modelo preentrenado
faceClassif = cv2.CascadeClassifier(cv2.data.haarcascades + "haarcascade_frontalface_default.xml")  # Clasificador para detectar rostros

class FacialRecognitionApp:
    def __init__(self):
        # Inicialización de variables y configuración de la ventana principal
        self.cap = None  # Objeto para capturar video
        self.window = Tk()
        self.window.title("Reconocimiento Facial | REGISTRO EsSalud")  # Título de la ventana
        self.window.resizable(False, False)  # Evita que la ventana cambie de tamaño
        self.window.geometry("1000x700+100+20")  # Dimensiones de la ventana
        self.setup_ui()  # Configura la interfaz de usuario

    def setup_ui(self):
        # Configuración de los elementos de la interfaz gráfica
        Label(
            self.window,
            text="RECONOCIMIENTO FACIAL",
            font=("Century Gothic", 28, "bold"),
            width=800,
            height=2,
            fg="#024379",
        ).pack()

        # Carga el logo de EsSalud
        self.load_image("imagenes/Logo_EsSalud.jpg", (180, 65), 10, 20)

        # Área para mostrar el video
        self.lbl_video = Label(self.window, border=0, relief="sunken")
        self.lbl_video.place(x=40, y=260)

        # Imagen de fondo de registro
        self.load_image("imagenes/fondo_registro.png", (380, 450), 580, 215)

        # Iconos para las entradas
        self.load_image("imagenes/user_icon.png", (45, 45), 625, 345)
        self.load_image("imagenes/dni_icon.png", (45, 45), 625, 450)

        # Entradas de texto para el nombre y apellido
        self.nombre_user = StringVar()
        self.apelli_user = StringVar()
        self.create_entry("Ingrese su Nombre", 670, 330, self.nombre_user)
        self.create_entry("Ingrese su Apellido", 670, 435, self.apelli_user)

        # Botones para iniciar cámara, salir y registrar
        self.create_button("buttons/btn_1.png", "buttons/btn_2.png", 200, 120, self.iniciar_camara)
        self.create_button("buttons/btn_salir_1.png", "buttons/btn_salir_2.png", 600, 120, self.cerrar_ventana)
        self.create_button("buttons/btn_reg_1.png", "buttons/btn_reg_2.png", 670, 580, self.registrar_cliente)

    def load_image(self, path, size, x, y):
        img = Image.open(path).resize(size, Image.LANCZOS)
        tk_img = ImageTk.PhotoImage(img)
        label = Label(self.window, relief="sunken", border=0, image=tk_img)
        label.image = tk_img
        label.place(x=x, y=y)

    def create_entry(self, placeholder, x, y, text_var):
        entry = Entry(
            self.window,
            textvariable=text_var,
            width=20,
            font=("Century Gothic", 15),
            borderwidth=12,
            relief=FLAT,
            disabledbackground="#09375D",
            disabledforeground="#6a7a96",
        )
        entry.place(x=x, y=y)
        entry.insert(0, placeholder)
        entry.configure(state="disabled")
        entry.bind("<Button-1>", lambda event: self.on_focus_in(entry, placeholder))
        entry.bind("<FocusOut>", lambda event: self.on_focus_out(entry, placeholder))

    def create_button(self, inactive_path, active_path, x, y, command):
        btn_inactivo = Image.open(inactive_path)
        btn_activado = Image.open(active_path)
        btn_inactivo_img = ImageTk.PhotoImage(btn_inactivo)
        btn_activado_img = ImageTk.PhotoImage(btn_activado)

        button = Button(
            self.window,
            image=btn_inactivo_img,
            bd=0,
            relief="sunken",
            command=command,
        )
        button.image_inactive = btn_inactivo_img
        button.image_active = btn_activado_img
        button.place(x=x, y=y)

        button.bind("<Enter>", lambda event: button.config(image=btn_activado_img))
        button.bind("<Leave>", lambda event: button.config(image=btn_inactivo_img))

    def on_focus_in(self, entry, placeholder):
        if entry.get() == placeholder:
            entry.configure(state="normal")
            entry.delete(0, END)

    def on_focus_out(self, entry, placeholder):
        if entry.get() == "":
            entry.insert(0, placeholder)
            entry.configure(state="disabled")

    def iniciar_camara(self):
        self.cap = cv2.VideoCapture(0, cv2.CAP_DSHOW)
        self.visualizar()

    def visualizar(self):
        if self.cap:
            ret, frame = self.cap.read()
            if ret:
                frame = imutils.resize(frame, width=500)
                frame = self.detectar_facial(frame)
                frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                im = Image.fromarray(frame)
                img = ImageTk.PhotoImage(image=im)
                self.lbl_video.configure(image=img)
                self.lbl_video.image = img
                self.lbl_video.after(3, self.visualizar)
            else:
                self.cap.release()

    def detectar_facial(self, frame):
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        faces = faceClassif.detectMultiScale(gray, 1.3, 5)
        for (x, y, w, h) in faces:
            face_image = cv2.resize(gray[y:y+h, x:x+w], (72, 72))
            result = face_mask.predict(face_image)
            color = (0, 255, 0) if LABELS[result[0]] == "Con_mascarilla" else (0, 0, 255)
            cv2.putText(frame, f"{LABELS[result[0]]}", (x, y - 15), cv2.FONT_HERSHEY_SIMPLEX, 0.8, color, 2)
            cv2.rectangle(frame, (x, y), (x + w, y + h), color, 2)
        return frame

    def registrar_cliente(self):
        if self.cap and self.nombre_user.get() and self.apelli_user.get():
            ret, frame = self.cap.read()
            if ret:
                _, buffer = cv2.imencode('.jpg', frame)
                image_data = buffer.tobytes()
                estado_mascarilla = "Sin_mascarilla"

                gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
                faces = faceClassif.detectMultiScale(gray, 1.3, 5)
                for (x, y, w, h) in faces:
                    face_image = cv2.resize(gray[y:y+h, x:x+w], (72, 72))
                    result = face_mask.predict(face_image)
                    estado_mascarilla = LABELS[result[0]]

                try:
                    db = mysql.connector.connect(host="localhost", user="root", password="fikmortvy02479bd", database="facial_recognition")
                    cursor = db.cursor()
                    cursor.execute(
                        "INSERT INTO pacientes (nombre, apellido, imagen, mascarilla) VALUES (%s, %s, %s, %s)",
                        (self.nombre_user.get(), self.apelli_user.get(), image_data, estado_mascarilla),
                    )
                    db.commit()
                    print("Registro exitoso.")
                except mysql.connector.Error as e:
                    print(f"Error: {e}")
                finally:
                    cursor.close()
                    db.close()
            else:
                print("Error al capturar imagen.")

    def cerrar_ventana(self):
        if self.cap:
            self.cap.release()
        self.window.destroy()

    def run(self):
        self.window.mainloop()


if __name__ == "__main__":
    app = FacialRecognitionApp()
    app.run()
